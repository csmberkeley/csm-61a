>>> a = [1, 2]
>>> b = a
>>> print(a.append([3, 4]))

>>> a

>>> b

>>> c = a[:]
>>> a[0] = 5
>>> a[2][0] = 6
>>> c

>>> a.extend([7, 8])
>>> a += [9]
>>> a += 10

>>> a

>>> print(c.pop(), c)


a = [1, 2, [3]]
def mystery(s, t):
    s.pop(1)
    return t.append(s)
b = a
a += [b[0]]
a = mystery(b, a[1:])


def accumulate(lst):
    """
    >>> l = [1, 5, 13, 4]
    >>> accumulate(l)
    23
    >>> l
    [1, 6, 19, 23]
    >>> deep_l = [3, 7, [2, 5, 6], 9]
    >>> accumulate(deep_l)
    32
    >>> deep_l
    [3, 10, [2, 7, 13], 32]
    """
    sum_so_far = 0
    for ________________________________________:
	________________________________________
        if isinstance(___________________, list):
	    inside = ___________________________
            ____________________________________
        else:
            ____________________________________
            ____________________________________
    return ___________________________________


def collapse(n):
    """
    >>> collapse(12234441)
    12341
    >>> collapse(11200000013333)
    12013
    """
    left, last = n // 10, n % 10

    if ___________________________________:

        ____________________________________

    elif _________________________________:

        ____________________________________
    else:
    
        ____________________________________


def make_change(n):
    """
    >>> make_change(5) # 5 = 4 + 1 (not 3 + 1 + 1)
    2
    >>> make_change(6) # 6 = 3 + 3 (not 4 + 1 + 1)
    2
    """

    if _____________________:
        return 0

    elif ___________________:

        ___________________________________

    elif ___________________:

        ___________________________________
    else:

        ___________________________________


def max_subset_sum(lst, n):
    """
    >>> max_subset_sum([1, 2, 3, 4], 2)
    7
    >>> max_subset_sum([1, 4, 2, 0, 6], 3)
    12
    """

    if _________________________:

        __________________________

    elif ________________________:

        __________________________

    with_elem = _____________________________ + _________

    without_elem = ____________________________________
    
    return ____________________________________________


